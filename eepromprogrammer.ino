// set pin variables
const byte DATA_PINS[8] = { 5, 6, 7, 8, 9, 10, 11, 12 };
const byte SER_PIN = 2;
const byte LATCH_PIN = 3;
const byte CLOCK_PIN = 4;
const byte WRITE_PIN = A0;   // active low
const byte OUTPUT_PIN = A1;  // active low
const byte LED_PIN = A2;     // indicator light

// alias for dumping binary into clipboard to paste here:
// hexasm a.out | xclip -selection clipboard
// ctrl + shift + k to delete previous line

byte instructions[] = {
  0x4c,0x76,0x80,0x48,0xda,0xa5,0x02,0x29,0x01,0xf0,0x23,0xa5,0x02,0x49,0x01,0x85,0x02,0xad,0x01,0x60,0xc9,0x12,0xf0,0x06,0xc9,0x59,0xf0,0x0a,0x80,0x4d,0xa5,0x02,0x49,0x02,0x85,0x02,0x80,0x45,0xa5,0x02,0x49,0x04,0x85,0x02,0x80,0x3d,0xad,0x01,0x60,0xc9,0xf0,0xf0,0x20,0xc9,0x12,0xf0,0x24,0xc9,0x59,0xf0,0x28,0xaa,0xa5,0x02,0x29,0x06,0xd0,0x05,0xbd,0xbb,0x82,0x80,0x03,0xbd,0xbb,0x83,0xa6,0x01,0x9d,0x00,0x02,0xe6,0x01,0x80,0x16,0xa5,0x02,0x09,0x01,0x85,0x02,0x80,0x0e,0xa5,0x02,0x09,0x02,0x85,0x02,0x80,0x06,0xa5,0x02,0x09,0x04,0x85,0x02,0xa9,0x0a,0x8d,0x08,0x60,0x9c,0x09,0x60,0x68,0xfa,0x40,0xa2,0xff,0x9a,0xa9,0xff,0x8d,0x03,0x50,0x9c,0x03,0x60,0x9c,0x02,0x60,0xa9,0x20,0x20,0x72,0x82,0x20,0x80,0x82,0x20,0x72,0x82,0xa9,0x80,0x20,0x72,0x82,0x20,0x80,0x82,0xa9,0x0f,0x20,0x62,0x82,0xa9,0x06,0x20,0x62,0x82,0xa9,0x01,0x20,0x62,0x82,0xa9,0x20,0x8d,0x0b,0x60,0xa9,0xa0,0x8d,0x0e,0x60,0xa9,0x0a,0x8d,0x08,0x60,0x9c,0x09,0x60,0x64,0x01,0x64,0x00,0x64,0x02,0x64,0x03,0xa9,0x3e,0x20,0x4a,0x82,0x58,0x78,0xa5,0x00,0xc5,0x01,0x58,0xd0,0x03,0x4c,0xc6,0x80,0xa6,0x00,0xbd,0x00,0x02,0xc9,0x0a,0xf0,0x37,0xc9,0x1b,0xf0,0x12,0xc9,0x08,0xf0,0x1e,0xa6,0x03,0x9d,0x00,0x03,0xe6,0x03,0x20,0x4a,0x82,0xe6,0x00,0x80,0xd6,0xa9,0x01,0x20,0x62,0x82,0xa9,0x3e,0x20,0x4a,0x82,0x64,0x03,0xe6,0x00,0x80,0xc6,0xa9,0x00,0xc5,0x03,0xf0,0x07,0xa9,0x10,0x20,0x62,0x82,0xc6,0x03,0xe6,0x00,0x80,0xb5,0xa2,0x00,0xbd,0x00,0x03,0xc9,0x77,0xf0,0x6c,0xc9,0x72,0xf0,0x33,0xc9,0x61,0xf0,0x03,0x4c,0x39,0x82,0xa9,0xc1,0x20,0x62,0x82,0x18,0xa5,0x04,0x65,0x05,0x90,0x07,0x48,0xa9,0x31,0x20,0x4a,0x82,0x68,0x48,0x4a,0x4a,0x4a,0x4a,0xaa,0xbd,0xab,0x82,0x20,0x4a,0x82,0x68,0x29,0x0f,0xaa,0xbd,0xab,0x82,0x20,0x4a,0x82,0x4c,0x39,0x82,0xe8,0xbd,0x00,0x03,0xc9,0x32,0xf0,0x26,0xc9,0x31,0xd0,0x26,0xa5,0x04,0x48,0xa9,0xc1,0x20,0x62,0x82,0x68,0x48,0x4a,0x4a,0x4a,0x4a,0xaa,0xbd,0xab,0x82,0x20,0x4a,0x82,0x68,0x29,0x0f,0xaa,0xbd,0xab,0x82,0x20,0x4a,0x82,0x4c,0x39,0x82,0xa5,0x05,0x80,0xdc,0x4c,0xed,0x81,0xe8,0xbd,0x00,0x03,0xc9,0x32,0xf0,0x6b,0xc9,0x31,0xd0,0x5b,0xe8,0xbd,0x00,0x03,0xc9,0x20,0xd0,0x53,0xe8,0xbd,0x00,0x03,0x20,0xd2,0x81,0xc9,0x45,0xf0,0x48,0x64,0x04,0x20,0xc0,0x81,0xe8,0x8a,0xc5,0x03,0xf0,0x0e,0xaa,0xbd,0x00,0x03,0x20,0xd2,0x81,0xc9,0x45,0xf0,0x32,0x20,0xc0,0x81,0x80,0x79,0x0a,0x0a,0x0a,0x0a,0x18,0x2a,0x26,0x04,0x2a,0x26,0x04,0x2a,0x26,0x04,0x2a,0x26,0x04,0x60,0xda,0xa2,0x00,0x48,0x8a,0xc9,0x10,0xf0,0x0d,0xaa,0x68,0xdd,0xab,0x82,0xf0,0x03,0xe8,0x80,0xf0,0x8a,0xfa,0x60,0x68,0xfa,0xa9,0x45,0x60,0xa9,0xc1,0x20,0x62,0x82,0xa9,0x45,0x20,0x4a,0x82,0x80,0x40,0xe8,0xbd,0x00,0x03,0xc9,0x20,0xd0,0xec,0xe8,0xbd,0x00,0x03,0x20,0xd2,0x81,0xc9,0x45,0xf0,0xe1,0x64,0x05,0x20,0x27,0x82,0xe8,0x8a,0xc5,0x03,0xf0,0x22,0xaa,0xbd,0x00,0x03,0x20,0xd2,0x81,0xc9,0x45,0xf0,0xcb,0x20,0x27,0x82,0x80,0x12,0x0a,0x0a,0x0a,0x0a,0x18,0x2a,0x26,0x05,0x2a,0x26,0x05,0x2a,0x26,0x05,0x2a,0x26,0x05,0x60,0xa9,0xc0,0x20,0x62,0x82,0xa9,0x3e,0x20,0x4a,0x82,0x64,0x03,0xe6,0x00,0x4c,0xc6,0x80,0x48,0x48,0x20,0x80,0x82,0x68,0x29,0xf0,0x09,0x02,0x20,0x72,0x82,0x68,0x0a,0x0a,0x0a,0x0a,0x09,0x02,0x20,0x72,0x82,0x60,0x48,0x48,0x20,0x80,0x82,0x68,0x29,0xf0,0x20,0x72,0x82,0x68,0x0a,0x0a,0x0a,0x0a,0x8d,0x01,0x50,0x09,0x08,0x8d,0x01,0x50,0x49,0x08,0x8d,0x01,0x50,0x60,0xa9,0x0e,0x8d,0x03,0x50,0xa9,0x04,0x8d,0x01,0x50,0x09,0x08,0x8d,0x01,0x50,0xad,0x01,0x50,0x48,0x49,0x08,0x8d,0x01,0x50,0x09,0x08,0x8d,0x01,0x50,0xad,0x01,0x50,0x68,0x29,0x80,0xd0,0xdb,0xa9,0xff,0x8d,0x03,0x50,0x60,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x61,0x62,0x63,0x64,0x65,0x66,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x20,0x60,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x71,0x31,0x3f,0x3f,0x3f,0x7a,0x73,0x61,0x77,0x32,0x3f,0x3f,0x63,0x78,0x64,0x65,0x34,0x33,0x3f,0x3f,0x20,0x76,0x66,0x74,0x72,0x35,0x3f,0x3f,0x6e,0x62,0x68,0x67,0x79,0x36,0x3f,0x3f,0x3f,0x6d,0x6a,0x75,0x37,0x38,0x3f,0x3f,0x2c,0x6b,0x69,0x6f,0x30,0x39,0x3f,0x3f,0x2e,0x2f,0x6c,0x3b,0x70,0x2d,0x3f,0x3f,0x3f,0x27,0x3f,0x5b,0x3d,0x3f,0x3f,0x3f,0x3f,0x0a,0x5d,0x3f,0x5c,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x08,0x3f,0x3f,0x31,0x3f,0x34,0x37,0x3f,0x3f,0x3f,0x30,0x2e,0x32,0x35,0x36,0x38,0x1b,0x3f,0x3f,0x2b,0x33,0x2d,0x2a,0x39,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x20,0x7e,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x51,0x21,0x3f,0x3f,0x3f,0x5a,0x53,0x41,0x57,0x40,0x3f,0x3f,0x43,0x58,0x44,0x45,0x23,0x24,0x3f,0x3f,0x20,0x56,0x46,0x54,0x52,0x25,0x3f,0x3f,0x4e,0x42,0x48,0x47,0x59,0x5e,0x3f,0x3f,0x3f,0x4d,0x4a,0x55,0x26,0x2a,0x3f,0x3f,0x3c,0x4b,0x49,0x4f,0x29,0x28,0x3f,0x3f,0x3e,0x3f,0x4c,0x3a,0x50,0x5f,0x3f,0x3f,0x3f,0x22,0x3f,0x7b,0x2b,0x3f,0x3f,0x3f,0x3f,0x3f,0x7d,0x3f,0x7c,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x31,0x3f,0x34,0x37,0x3f,0x3f,0x3f,0x30,0x2e,0x32,0x35,0x36,0x38,0x3f,0x3f,0x3f,0x2b,0x33,0x2d,0x2a,0x39,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f
  
};

void setAddress(word address /* 0x0000 - 0x7FFF) */) {
  // shifts out to two 595 shift registers
  digitalWrite(LATCH_PIN, LOW);
  shiftOut(SER_PIN, CLOCK_PIN, LSBFIRST, lowByte(address));
  shiftOut(SER_PIN, CLOCK_PIN, LSBFIRST, highByte(address));
  digitalWrite(LATCH_PIN, HIGH);
}

byte readByte() {
  byte output = 0;
  // data pins not set to input because they are set to input by default
  // do not write to eeprom in the same program as reading, causes hardware issues
  for (int i = 0; i < 8; i++) {
    bitWrite(output, i, digitalRead(DATA_PINS[i]));
  }
  return output;
}
void printByte() {
  char buf[16];
  sprintf(buf, "%02X ", readByte());
  Serial.print(buf);
}
void printEEPROM() {
  digitalWrite(OUTPUT_PIN, LOW);
  for (int i = 0; i < 0x800; i++) {
    char addrBuf[16];
    sprintf(addrBuf, "%04X: ", i * 0x10);
    Serial.print(addrBuf);
    for (int j = 0; j < 0x10; j++) {
      // char dataBuf[8];
      setAddress(j + (i * 0x10));
      // sprintf(dataBuf, "%02X ", readByte());
      // Serial.print(dataBuf);
      printByte();
    }
    Serial.println();
  }
}

void writeByte(byte data) {
  digitalWrite(OUTPUT_PIN, HIGH);
  for (int i = 0; i < 8; i++) {
    pinMode(DATA_PINS[i], OUTPUT);
    digitalWrite(DATA_PINS[i], bitRead(data, i));
  }
  digitalWrite(WRITE_PIN, LOW);
  delayMicroseconds(1);
  digitalWrite(WRITE_PIN, HIGH);
  delay(10);
}
void clearEEPROM(byte clearByte) {
  // takes like 5 minutes, be patient with this one
  for (unsigned int i = 0; i < 0x8000; i++) {
    setAddress(i);
    writeByte(clearByte);
  }
}
void writeOrigin(word originData) {
  // sets the starting address of the program counter, 6502 specific
  setAddress(0x7FFC);
  writeByte(lowByte(originData));
  setAddress(0x7FFD);
  writeByte(highByte(originData));
}
word readOrigin() {
  word output = 0x0000;
  setAddress(0x7FFD);
  output = readByte() * 0x100;  // shifts read byte to upper half of word
  setAddress(0x7FFC);
  output += readByte();
  return output;
}

void writeInstructions(word startingAddress) {
  for (int i = 0; i < sizeof(instructions) / sizeof(instructions[0]); i++) {
    setAddress(startingAddress + i);
    writeByte(instructions[i]);
  }
}

void setup() {
  // put your setup code here, to run once:
  /* serial and pin setups */
  for (int i = 0; i < 8; i++) {
    pinMode(DATA_PINS[i], INPUT);
  }

  pinMode(SER_PIN, OUTPUT);
  pinMode(LATCH_PIN, OUTPUT);
  pinMode(CLOCK_PIN, OUTPUT);

  digitalWrite(WRITE_PIN, HIGH);
  pinMode(WRITE_PIN, OUTPUT);
  digitalWrite(WRITE_PIN, HIGH);

  pinMode(OUTPUT_PIN, OUTPUT);
  digitalWrite(OUTPUT_PIN, HIGH);

  pinMode(LED_PIN, OUTPUT);

  Serial.begin(9600);

  /* sent out instructions */
  digitalWrite(LED_PIN, HIGH);
  Serial.println("start");


  digitalWrite(OUTPUT_PIN, LOW);
  printEEPROM();

  // char buf[16];
  // sprintf(buf, "%02X ", readOrigin());
  // Serial.print(buf);
  // word interruptVec = 0x8003;

  // writeInstructions(0x0000);

  // setAddress(0x7FFE);
  // writeByte(lowByte(interruptVec));
  // setAddress(0x7FFF);
  // writeByte(highByte(interruptVec));
  // writeOrigin(0x8000);
  Serial.println("end");
}

void loop() {
  // put your main code here, to run repeatedly:
  digitalWrite(LED_PIN, HIGH);
  delay(300);
  digitalWrite(LED_PIN, LOW);
  delay(300);
}
